// <auto-generated />
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace MediawikiTranslator.Models.Data.MHRS
{
	public partial class Bow
	{
		[JsonProperty("snow.equip.BowBaseUserData", NullValueHandling = NullValueHandling.Ignore)]
		public SnowEquipBowBaseUserData SnowEquipBowBaseUserData { get; set; }

		public static Weapon[] Fetch()
		{
			return FromJson(File.ReadAllText(@"D:\MH_Data Repo\MH_Data\Raw Data\MHRS\natives\stm\data\define\player\weapon\bow\bowbasedata.user.2.json")).SnowEquipBowBaseUserData.Param;
		}
	}

	public partial class SnowEquipBowBaseUserData
	{
		[JsonProperty("_Param", NullValueHandling = NullValueHandling.Ignore)]
		public BowParam[] Param { get; set; }
	}

	public partial class BowParam : Weapon
	{
		[JsonProperty("_BowBottlePowerUpTypeList", NullValueHandling = NullValueHandling.Ignore)]
		public string[] BowBottlePowerUpTypeList { get; set; }

		[JsonProperty("_BowBottleEquipFlagList", NullValueHandling = NullValueHandling.Ignore)]
		public bool[] BowBottleEquipFlagList { get; set; }

		[JsonProperty("_BowDefaultChargeLvLimit", NullValueHandling = NullValueHandling.Ignore)]
		public string BowDefaultChargeLvLimit { get; set; }

		[JsonProperty("_BowChargeTypeList", NullValueHandling = NullValueHandling.Ignore)]
		public string[] BowChargeTypeList { get; set; }

		[JsonProperty("_BowCurveType", NullValueHandling = NullValueHandling.Ignore)]
		public string BowCurveType { get; set; }
	}

	public partial class Bow
	{
		public static Bow FromJson(string json) => JsonConvert.DeserializeObject<Bow>(json, MediawikiTranslator.Models.Data.MHRS.BowConverter.Settings);
	}

	internal static class BowConverter
	{
		public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
		{
			MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
			DateParseHandling = DateParseHandling.None,
			Converters =
			{
				new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
			},
		};
	}
}
